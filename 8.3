// server.js
const express = require("express");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const cors = require("cors");

const app = express();
app.use(express.json());
app.use(cors());

// Secret key for JWT (in production, use an environment variable)
const JWT_SECRET = "super_secret_key_12345";

// In-memory "users" for demonstration
const users = [
  { id: 1, username: "admin", password: bcrypt.hashSync("admin123", 8), role: "Admin" },
  { id: 2, username: "moderator", password: bcrypt.hashSync("mod123", 8), role: "Moderator" },
  { id: 3, username: "user", password: bcrypt.hashSync("user123", 8), role: "User" },
];

// ===== JWT Helper Functions =====

// Middleware: verify token
function verifyToken(req, res, next) {
  const authHeader = req.headers.authorization;
  if (!authHeader)
    return res.status(401).json({ message: "Access denied. No token provided." });

  const token = authHeader.split(" ")[1];
  jwt.verify(token, JWT_SECRET, (err, decoded) => {
    if (err)
      return res.status(403).json({ message: "Invalid or expired token." });
    req.user = decoded; // { id, username, role }
    next();
  });
}

// Middleware: check role
function authorizeRoles(...allowedRoles) {
  return (req, res, next) => {
    if (!req.user || !allowedRoles.includes(req.user.role)) {
      return res
        .status(403)
        .json({ message: `Access denied. Requires one of: ${allowedRoles.join(", ")}.` });
    }
    next();
  };
}

// ===== Routes =====

// Public route
app.get("/", (req, res) => {
  res.json({ message: "Welcome to the Role-Based Auth API ğŸš€" });
});

// Login route (returns JWT)
app.post("/login", async (req, res) => {
  const { username, password } = req.body;
  const user = users.find((u) => u.username === username);

  if (!user) return res.status(400).json({ message: "Invalid username or password." });

  const passwordIsValid = await bcrypt.compare(password, user.password);
  if (!passwordIsValid)
    return res.status(400).json({ message: "Invalid username or password." });

  // Create token with user role
  const token = jwt.sign(
    { id: user.id, username: user.username, role: user.role },
    JWT_SECRET,
    { expiresIn: "1h" }
  );

  res.json({
    message: "Login successful!",
    token,
    user: { username: user.username, role: user.role },
  });
});

// Protected: User profile
app.get("/user/profile", verifyToken, authorizeRoles("User", "Admin", "Moderator"), (req, res) => {
  res.json({
    message: `Welcome ${req.user.username}! This is your profile.`,
    role: req.user.role,
  });
});

// Protected: Moderator management route
app.get("/moderator/manage", verifyToken, authorizeRoles("Moderator", "Admin"), (req, res) => {
  res.json({
    message: `Hello ${req.user.username}! You have Moderator access.`,
    role: req.user.role,
  });
});

// Protected: Admin-only dashboard
app.get("/admin/dashboard", verifyToken, authorizeRoles("Admin"), (req, res) => {
  res.json({
    message: `Welcome ${req.user.username}! This is the Admin dashboard.`,
    role: req.user.role,
  });
});

// Fallback route
app.use((req, res) => {
  res.status(404).json({ message: "Route not found" });
});

// Start server
const PORT = 5000;
app.listen(PORT, () => console.log(`ğŸš€ Server running on port ${PORT}`));
